// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go
//
// Generated by this command:
//
//	mockgen -source=interfaces.go -destination=mocks/mock.go
//

// Package mock_auth is a generated GoMock package.
package mock_auth

import (
	context "context"
	entities "go-clean/internal/entities"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockuseCases is a mock of useCases interface.
type MockuseCases struct {
	ctrl     *gomock.Controller
	recorder *MockuseCasesMockRecorder
	isgomock struct{}
}

// MockuseCasesMockRecorder is the mock recorder for MockuseCases.
type MockuseCasesMockRecorder struct {
	mock *MockuseCases
}

// NewMockuseCases creates a new mock instance.
func NewMockuseCases(ctrl *gomock.Controller) *MockuseCases {
	mock := &MockuseCases{ctrl: ctrl}
	mock.recorder = &MockuseCasesMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockuseCases) EXPECT() *MockuseCasesMockRecorder {
	return m.recorder
}

// ForgotPassword mocks base method.
func (m *MockuseCases) ForgotPassword(ctx context.Context, data entities.UserForgotPassword) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ForgotPassword", ctx, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// ForgotPassword indicates an expected call of ForgotPassword.
func (mr *MockuseCasesMockRecorder) ForgotPassword(ctx, data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ForgotPassword", reflect.TypeOf((*MockuseCases)(nil).ForgotPassword), ctx, data)
}

// ForgotPasswordConfirm mocks base method.
func (m *MockuseCases) ForgotPasswordConfirm(ctx context.Context, data entities.UserForgotPasswordConfirm) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ForgotPasswordConfirm", ctx, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// ForgotPasswordConfirm indicates an expected call of ForgotPasswordConfirm.
func (mr *MockuseCasesMockRecorder) ForgotPasswordConfirm(ctx, data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ForgotPasswordConfirm", reflect.TypeOf((*MockuseCases)(nil).ForgotPasswordConfirm), ctx, data)
}

// Login mocks base method.
func (m *MockuseCases) Login(ctx context.Context, data entities.UserLogin) (string, string, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", ctx, data)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(string)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// Login indicates an expected call of Login.
func (mr *MockuseCasesMockRecorder) Login(ctx, data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockuseCases)(nil).Login), ctx, data)
}

// Logout mocks base method.
func (m *MockuseCases) Logout(ctx context.Context, userID, sessionID string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Logout", ctx, userID, sessionID)
}

// Logout indicates an expected call of Logout.
func (mr *MockuseCasesMockRecorder) Logout(ctx, userID, sessionID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Logout", reflect.TypeOf((*MockuseCases)(nil).Logout), ctx, userID, sessionID)
}

// LogoutAll mocks base method.
func (m *MockuseCases) LogoutAll(ctx context.Context, userID string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "LogoutAll", ctx, userID)
}

// LogoutAll indicates an expected call of LogoutAll.
func (mr *MockuseCasesMockRecorder) LogoutAll(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LogoutAll", reflect.TypeOf((*MockuseCases)(nil).LogoutAll), ctx, userID)
}

// Registration mocks base method.
func (m *MockuseCases) Registration(ctx context.Context, data entities.UserAdd) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Registration", ctx, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// Registration indicates an expected call of Registration.
func (mr *MockuseCasesMockRecorder) Registration(ctx, data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Registration", reflect.TypeOf((*MockuseCases)(nil).Registration), ctx, data)
}

// RegistrationConfirm mocks base method.
func (m *MockuseCases) RegistrationConfirm(ctx context.Context, data entities.UserAddConfirm) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegistrationConfirm", ctx, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegistrationConfirm indicates an expected call of RegistrationConfirm.
func (mr *MockuseCasesMockRecorder) RegistrationConfirm(ctx, data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegistrationConfirm", reflect.TypeOf((*MockuseCases)(nil).RegistrationConfirm), ctx, data)
}

// UpdateJWT mocks base method.
func (m *MockuseCases) UpdateJWT(ctx context.Context, userID, sessionID, refreshJWT string) (string, string, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateJWT", ctx, userID, sessionID, refreshJWT)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(string)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// UpdateJWT indicates an expected call of UpdateJWT.
func (mr *MockuseCasesMockRecorder) UpdateJWT(ctx, userID, sessionID, refreshJWT any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateJWT", reflect.TypeOf((*MockuseCases)(nil).UpdateJWT), ctx, userID, sessionID, refreshJWT)
}
